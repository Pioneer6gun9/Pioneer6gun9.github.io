{"title":"【C语言】指针的运算规则","uid":"24fa9010f69884222a96dea85a564a6c","slug":"【C语言】指针的运算规则","date":"2023-08-21T07:23:40.000Z","updated":"2023-08-22T10:46:52.393Z","comments":true,"path":"api/articles/【C语言】指针的运算规则.json","keywords":null,"cover":"/img/1dfa7ac04c4c49aba94bc10875d08062.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从根本上看，指针（pointer）是一个值为内存地址的变量（或数据对象），正如char类型变量的的值是字符，int类型变量的值是整数，指针变量的值是地址。那么作为一个有值的变量就一定有运算，今天我们就来揭开指针运算规则的面纱。</p></blockquote>\n<h2 id=\"指针±正整数\"><a href=\"#指针±正整数\" class=\"headerlink\" title=\"指针±正整数\"></a>指针±正整数</h2><p>我们的系统中，地址按字节编址，int类型占2字节，double类型占8字节。在C中，指针加1指的是增加一个存储单元。<br>对数组而言，加一意味着地址是下一个元素的地址。所以数组的表示法也是在变相地使用指针，单个数组名指的就是该数组的首地址。</p>\n<h2 id=\"指针-指针\"><a href=\"#指针-指针\" class=\"headerlink\" title=\"指针-指针\"></a>指针-指针</h2><p>可以计算两个指针的差值。通常，求差的两个指针分别指向同一个数组的不同元素，通过计算求出两元素之间的距离。<strong>差值的单位与数组类型的单位相同。</strong><br>我们可以用如下的程序来帮助理解以上的指针运算法则。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p4<span class=\"token punctuation\">;</span>\n    \n    p1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//将数组首地址赋给指针</span>\n    p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//将数组中第三个元素的地址赋给指针</span>\n    \n    <span class=\"token comment\">//指针加正整数</span>\n    p3 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 = %p , p3 = %p , *p3 = %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//指针减正整数</span>\n\tp4 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2 = %p , p4 = %p , *p4 = %d\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//指针-指针</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>p3 <span class=\"token operator\">-</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>程序运行结果如下图所示：<br><img src=\"/img/f391324bfce0464f87f09bd4909603d0.png\" alt=\"程序运行结果\"></p>\n<h2 id=\"指针-指针-1\"><a href=\"#指针-指针-1\" class=\"headerlink\" title=\"指针+指针\"></a>指针+指针</h2><p>有些人可能会想了既然有指针-指针，那会不会有指针+指针呢？（其实我一开始也是这个有些人之一）<br>答案是指针+指针是没有意义的。<br>那么这到底是为什么呢？我们来思考一下，如果存在如上的p3,p4两个指针变量，两者相减是只两者所指向的数组的元素距离，那两者相加难道是数组元素距离之和，那显然没什么意义。<br>就拿生活中的家庭门牌号举例：“门牌号161-门牌号160&#x3D;1”是指两家相差一户，那“门牌号161-门牌号160&#x3D;321”难道指两家合起来有321户？显然不是。<br>所以指针相加是没有意义滴。</p>\n<h2 id=\"指针的关系运算（比较大小）\"><a href=\"#指针的关系运算（比较大小）\" class=\"headerlink\" title=\"指针的关系运算（比较大小）\"></a>指针的关系运算（比较大小）</h2><p>关系运算：&lt; &lt;&#x3D; &gt; &gt;&#x3D; 是有意义的。不过前提是它们都指向同一个数组中的元素。根据你所使用的操作符，比较表达式将告诉你哪个指针指向数组中更前或更后的元素。标准并未定义如果两个任意的指针进行比较会产生什么结果（一般情况下就不要用了）。</p>\n","feature":true,"text":" 从根本上看，指针（pointer）是一个值为内存地址的变量（或数据对象），正如char类型变量的的值是字符，int类型变量的值是整数，指针变量的值是地址。那么...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Programming","slug":"Programming","count":3,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"pointer","slug":"pointer","count":2,"path":"api/tags/pointer.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%C2%B1%E6%AD%A3%E6%95%B4%E6%95%B0\"><span class=\"toc-text\">指针±正整数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88-%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针-指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88-%E6%8C%87%E9%92%88-1\"><span class=\"toc-text\">指针+指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%EF%BC%88%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F%EF%BC%89\"><span class=\"toc-text\">指针的关系运算（比较大小）</span></a></li></ol>","author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"【C语言】函数的传参","uid":"c254c3de9a43c14a77c3a256b80a7bea","slug":"【C语言】函数的传参","date":"2023-08-21T11:14:19.000Z","updated":"2023-08-22T09:19:35.331Z","comments":true,"path":"api/articles/【C语言】函数的传参.json","keywords":null,"cover":"/img/photo-9.jpg","text":"传参的方式 一般在我们C语言中常用的是三种传参方式：传值、传址和引用传递 传值传值我们也常称作值传递，是我们一开始接触函数就学习的一中传参方式。意思也很好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Programming","slug":"Programming","count":3,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true},"next_post":{"title":"I do not know where to go,but I have been on the road","uid":"f21bf18a9f5ba2d3dd5aab9bcba54a92","slug":"I-do-not-know-where-to-go-but-I-have-been-on-the-road-0","date":"2023-08-20T06:57:53.000Z","updated":"2023-08-22T07:23:08.108Z","comments":true,"path":"api/articles/I-do-not-know-where-to-go-but-I-have-been-on-the-road-0.json","keywords":null,"cover":"/img/v2-c77f6a5ed31b7dea0625bfd02c34d55f_r.png","text":"《千与千寻》是很多人小时候的记忆，也是很多人想重看一遍的电影。在现在的我看来，里面印象最深刻就是那句“I do not know where to go,but I have been on the road”...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Live","slug":"Live","count":1,"path":"api/categories/Live.json"}],"tags":[{"name":"宫崎骏","slug":"宫崎骏","count":1,"path":"api/tags/宫崎骏.json"},{"name":"《千与千寻》","slug":"《千与千寻》","count":1,"path":"api/tags/《千与千寻》.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true}}