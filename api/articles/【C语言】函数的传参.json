{"title":"【C语言】函数的传参","uid":"c254c3de9a43c14a77c3a256b80a7bea","slug":"【C语言】函数的传参","date":"2023-08-21T11:14:19.000Z","updated":"2023-08-22T07:29:56.624Z","comments":true,"path":"api/articles/【C语言】函数的传参.json","keywords":null,"cover":"/img/photo-9.jpg","content":"<h2 id=\"传参的方式\"><a href=\"#传参的方式\" class=\"headerlink\" title=\"传参的方式\"></a>传参的方式</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一般在我们C语言中常用的是三种传参方式：传值、传址和引用传递</p></blockquote>\n<h2 id=\"传值\"><a href=\"#传值\" class=\"headerlink\" title=\"传值\"></a>传值</h2><p>传值我们也常称作值传递，是我们一开始接触函数就学习的一中传参方式。意思也很好理解，就是指在调用函数时将实际参数复制一份传递到函数中，函数中传入的参数称作传参，这样将不会影响到实际参数。<strong>要注意的是实参可以是常量、变量、表达式，形参只能是变量；传参只有在函数被调用时才会被分配内存，所以在函数中如果对参数进行修改，函数中传入的参数称作传参，将不会影响到实际参数。</strong><br>下面这个代码也是老师必定会在上课时给我们看的，对理解传参和形参很有帮助。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pirntf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swap : a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main : a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/img/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%821.0.png\" alt=\"在这里插入图片描述\"><br>我们可以看到，a和b在进行交换之前，他们的值分别为2和3，而进行交换操作之后，它们的值仍为2和3，但是在函数swap内部我们可以看到a和b的值确实发生过了交换。也就是说明了传参的改变并不会影响到实参。<br>从这样看来似乎我们这个函数好像没用啊，那接下来就由我们的传址出场。</p>\n<h2 id=\"传址\"><a href=\"#传址\" class=\"headerlink\" title=\"传址\"></a>传址</h2><p>传址也就是地址传递，与值传递的不同在于，它把实参的存储地址传送给形参，使得形参指针和实参指针指向同一块地址。因此，被调用函数中对形参指针所指向的地址中内容的任何改变都会影响到实参。<br>那么再让我们用传址的方式来写一下上面的交换函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前：a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后：a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后：a = %d,b = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/img/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%821.png\" alt=\"在这里插入图片描述\"><br>从上述代码的输出结果可以发现。通过指针，地址传递我们成功实现了两个数的交换，而且传入的地址在swap函数和main函数中没有发生任何改变。</p>\n<h2 id=\"引用传参\"><a href=\"#引用传参\" class=\"headerlink\" title=\"引用传参\"></a>引用传参</h2><p>引用传递是以引用为参数，则既可以使得对形参的任何操作都能改变相应数据，又使函数调用方便。引用传递是在形参调用前加入引用运算符“&amp;”。引用为实参的别名，和实参是同一个变量，则他们的值也相同，该引用改变则它的实参也改变。<br>引用传参主要出现在C++的编程当中，大家如果对此不怎么熟悉的话，用下面这串代码可以帮助理解。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\">//&amp;不是取地址的意思</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//引用传递</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//形参会修饰实参</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"引用传递\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//! 传引用的实参和形参是双向传递</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"传参的方式 一般在我们C语言中常用的是三种传参方式：传值、传址和引用传递 传值传值我们也常称作值传递，是我们一开始接触函数就学习的一中传参方式。意思也很好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Programming","slug":"Programming","count":3,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%8F%82%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">传参的方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">传值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%9D%80\"><span class=\"toc-text\">传址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E4%BC%A0%E5%8F%82\"><span class=\"toc-text\">引用传参</span></a></li></ol>","author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"【C语言】指针数组","uid":"b32478a9812ff68e333c44fb1b05246e","slug":"【C语言】指针数组","date":"2023-08-22T05:33:41.000Z","updated":"2023-08-22T06:45:59.197Z","comments":true,"path":"api/articles/【C语言】指针数组.json","keywords":null,"cover":"/img/20210901112011_99137.jpg","text":"定义指针数组定义的一般形式是： 类型标识符 *数组名[数组长度]；数组名前缀“*”,表示定义的数组是一个指针数组。例如 int *p[10];即定义了数组p是指...","link":"","photos":[],"count_time":{"symbolsCount":987,"symbolsTime":"1 mins."},"categories":[{"name":"Programming","slug":"Programming","count":3,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"pointer","slug":"pointer","count":2,"path":"api/tags/pointer.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true},"next_post":{"title":"【C语言】指针的运算规则","uid":"24fa9010f69884222a96dea85a564a6c","slug":"【C语言】指针的运算规则","date":"2023-08-21T07:23:40.000Z","updated":"2023-08-22T07:27:47.540Z","comments":true,"path":"api/articles/【C语言】指针的运算规则.json","keywords":null,"cover":"/img/1dfa7ac04c4c49aba94bc10875d08062.jpg","text":" 从根本上看，指针（pointer）是一个值为内存地址的变量（或数据对象），正如char类型变量的的值是字符，int类型变量的值是整数，指针变量的值是地址。那么...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Programming","slug":"Programming","count":3,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"pointer","slug":"pointer","count":2,"path":"api/tags/pointer.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true}}