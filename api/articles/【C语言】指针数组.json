{"title":"【C语言】指针数组","uid":"b32478a9812ff68e333c44fb1b05246e","slug":"【C语言】指针数组","date":"2023-08-22T05:33:41.000Z","updated":"2023-08-22T10:47:00.446Z","comments":true,"path":"api/articles/【C语言】指针数组.json","keywords":null,"cover":"/img/20210901112011_99137.jpg","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>指针数组定义的一般形式是：<br>    类型标识符  *数组名[数组长度]；<br>数组名前缀“*”,表示定义的数组是一个指针数组。<br>例如  int *p[10];即定义了数组p是指针数组。数组p的每个元素是指针类型，存储int型变量的地址。</p>\n<h2 id=\"与数组指针区分\"><a href=\"#与数组指针区分\" class=\"headerlink\" title=\"与数组指针区分\"></a>与数组指针区分</h2><p>指针数组 *p[n]<br>指针数组：是数组——装着指针的<strong>数组</strong>。<br>数组指针 (*p)[n]<br>数组指针：是指针——指向数组的<strong>指针</strong>。</p>\n<h2 id=\"例题进阶\"><a href=\"#例题进阶\" class=\"headerlink\" title=\"例题进阶\"></a>例题进阶</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"zhao\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"qian\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div align=\"center\">\n    <img src=\"/img/ea1b664462f242f5902259157619dd01.png\" style=\"width: auto; height: auto;\">\n</div>\n\n<p>上面那串代码关于name这个指针数组，我们不难得出</p>\n<table>\n<thead>\n<tr>\n<th>name[i]</th>\n<th>*name[i]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[0]</td>\n<td>“zhao”</td>\n</tr>\n<tr>\n<td>name[1]</td>\n<td>“qian”</td>\n</tr>\n<tr>\n<td>name[2]</td>\n<td>“sun”</td>\n</tr>\n</tbody></table>\n<p>那么我这里有个问题，为什么我们要使用**p这个二级指针，为什么name[0]明明是一个指针变量却可以输出为”zhao”?接下来我会用下面这个例子带大家解决上述疑问，揭开数组指针的神秘面纱。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//代码块1</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//代码块2</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\n\tq <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div align=\"center\">\n    <img src=\"/img/f77fa894398546a5a589e1cee5473473.png\" style=\"width: auto; height: auto;\">\n</div>\n\n\n<p>上述代码块1是直接用指针来接受字符串，指针q直接指向”abcd”的首地址，代码块2是用指针来指向字符数组a，，通过指向a的首地址从而实现对字符串的操作。<br>那么我们上面数组指针中的name[0]就相当于这里的指针q，这样对于name[0]的输出是不是明了许多。<br>而二级指针p相当于<em>p指向数组name，所以name[0]就相当于是</em>p，*name[0]不就是**p吗？</p>\n","feature":true,"text":"定义指针数组定义的一般形式是： 类型标识符 *数组名[数组长度]；数组名前缀“*”,表示定义的数组是一个指针数组。例如 int *p[10];即定义了数组p是指...","link":"","photos":[],"count_time":{"symbolsCount":988,"symbolsTime":"1 mins."},"categories":[{"name":"Programming","slug":"Programming","count":4,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"pointer","slug":"pointer","count":2,"path":"api/tags/pointer.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%8C%BA%E5%88%86\"><span class=\"toc-text\">与数组指针区分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">例题进阶</span></a></li></ol>","author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"69关打通Html基础（freeCodeCamp（🔥）实践笔记之CatPhotoApp）","uid":"6a56833218517b845ffd222dd9a495f3","slug":"69关打通Html基础（freeCodeCamp（🔥）实践笔记之CatPhotoApp）","date":"2023-08-27T06:57:33.000Z","updated":"2023-08-27T09:37:49.561Z","comments":true,"path":"api/articles/69关打通Html基础（freeCodeCamp（🔥）实践笔记之CatPhotoApp）.json","keywords":null,"cover":"/img/1dfa7ac04c4c49aba94bc10875d08062.jpg","text":"前言​ 从大一下开始接触前端，发现前端是所见即所得，刚写完的代码下一秒已经在浏览器里面呈现，之后跟着一位研究生学长完成了大学以来的第一个项目，项目的结果并不一定...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"Programming","slug":"Programming","count":4,"path":"api/categories/Programming.json"},{"name":"Frontend","slug":"Programming/Frontend","count":1,"path":"api/categories/Programming/Frontend.json"}],"tags":[{"name":"Html","slug":"Html","count":1,"path":"api/tags/Html.json"},{"name":"freeCodeCamp","slug":"freeCodeCamp","count":1,"path":"api/tags/freeCodeCamp.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true},"next_post":{"title":"【C语言】函数的传参","uid":"c254c3de9a43c14a77c3a256b80a7bea","slug":"【C语言】函数的传参","date":"2023-08-21T11:14:19.000Z","updated":"2023-08-22T09:19:35.331Z","comments":true,"path":"api/articles/【C语言】函数的传参.json","keywords":null,"cover":"/img/photo-9.jpg","text":"传参的方式 一般在我们C语言中常用的是三种传参方式：传值、传址和引用传递 传值传值我们也常称作值传递，是我们一开始接触函数就学习的一中传参方式。意思也很好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Programming","slug":"Programming","count":4,"path":"api/categories/Programming.json"}],"tags":[{"name":"C","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"KKfrank","slug":"blog-author","avatar":"/img/蕴含“K”字的蓝紫配色的logo (1).jpg","link":"/","description":"I do not know where to go <br /> but I have been on the road.","socials":{"github":"https://github.com/Pioneer6gun9","twitter":"https://twitter.com/dingmingya6268","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/70-95-32-21","csdn":"https://blog.csdn.net/m0_72594605","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://www.facebook.com/profile.php?id=100093168844220"}}}},"feature":true}}